steps:
  # Step 0: Generate dynamic version tag
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $$VERSION_TAG"

  # Step 1: Create Instance Template (Regional) with startup script
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create Instance Template'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env

        gcloud compute instance-templates create vamsi-template-$$VERSION_TAG \
          --machine-type=e2-medium \
          --region=asia-east1 \
          --image-family=debian-12 \
          --image-project=debian-cloud \
          --tags=http-server,https-server,allow-8080 \
          --metadata=startup-script='#!/bin/bash
          echo "üì¶ Startup script started."
          apt-get update -y
          apt-get install -y git python3-pip python3.11-venv lsof

          mkdir -p /home/sajja_vamsi/my-app
          cd /home/sajja_vamsi/my-app

          PORT_PID=$$(lsof -t -i:8080)
          if [ -n "$$PORT_PID" ]; then
            echo "üî™ Killing process on port 8080 (PID=$$PORT_PID)..."
            kill -9 "$$PORT_PID"
          fi

          echo "üîÅ Cloning repo..."
          git clone https://github.com/20481A04K2/jenkinscloudbuildtomig.git . || echo "Repo exists."

          echo "üêç Creating venv..."
          python3 -m venv venv
          source venv/bin/activate

          echo "üì¶ Installing Flask..."
          pip install flask

          echo "üöÄ Running Flask app..."
          nohup python3 app.py --host=0.0.0.0 --port=8080 > flask.log 2>&1 &'

  # Step 2: Create or update MIG (Zonal)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create or Update MIG'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        MIG_NAME="vamsi-mig"
        ZONE="asia-east1-b"
        PROJECT_ID="euphoric-world-464505-q1"

        echo "üîç Checking if MIG exists..."
        if ! gcloud compute instance-groups managed describe $$MIG_NAME --zone=$$ZONE --project=$$PROJECT_ID > /dev/null 2>&1; then
          echo "üöÄ Creating MIG..."
          gcloud compute instance-groups managed create $$MIG_NAME \
            --base-instance-name=vamsi-instance \
            --template=vamsi-template-$$VERSION_TAG \
            --size=1 \
            --zone=$$ZONE \
            --project=$$PROJECT_ID
        else
          echo "‚ôªÔ∏è Updating MIG with new template..."
          gcloud compute instance-groups managed set-instance-template $$MIG_NAME \
            --template=vamsi-template-$$VERSION_TAG \
            --zone=$$ZONE \
            --project=$$PROJECT_ID

          echo "üîÑ Rolling restart to apply new template..."
          gcloud compute instance-groups managed rolling-action restart $$MIG_NAME \
            --zone=$$ZONE \
            --project=$$PROJECT_ID
        fi

options:
  logging: CLOUD_LOGGING_ONLY
